/**
* @Title: Global branch history table and global pattern history table (GAg) branch predictor
* @Author: Nishad Saraf (nishadsaraf@gmail.com)
* @Created: November 5, 2017 
* @Revision: 0.1
*
*/

#include "ooo_cpu.h"

#define GPT_SIZE 4096			// size of global predictor table
#define TEN_BIT_MASK 0x3FF 		// bit mask for configuration 1
#define TWELVE_BIT_MASK 0XFFF	// bit mask for configuration 2
#define MAX_COUNTER 3			// counter for 2-bit saturation counter

int global_history_reg;
int global_predictor_table[NUM_CPUS][GPT_SIZE];

void O3_CPU::initialize_branch_predictor()
{
    cout << "CPU " << cpu << " GAg branch predictor" << endl;

    global_history_reg = 0;

    for(int i=0; i<GPT_SIZE; i++)
		global_predictor_table[cpu][i] = 0;
}

uint8_t O3_CPU::predict_branch(uint64_t ip)
{
    int prediction = 1;
    int index = (ip ^ global_history_reg) % GPT_SIZE;	// hashing

    prediction = (global_predictor_table[cpu][index]  >= ((MAX_COUNTER + 1)/2)) ? 1 : 0;
    return prediction;
}

void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken)
{
    int index = (ip ^ global_history_reg) % GPT_SIZE;

	// update the global history register
	// left shift and insert the new value while masking the other extraneous bits
    global_history_reg = ((global_history_reg << 1) & TWELVE_BIT_MASK) | taken;	
    
	// update the appropriate 2-bit saturation counter in the global predictor table
    if (taken && (global_predictor_table[cpu][index] < MAX_COUNTER))
    	global_predictor_table[cpu][index]++;
    else if ((taken == 0) && (global_predictor_table[cpu][index] > 0))
		global_predictor_table[cpu][index]--;
}

